name: 🚀 API Test Automation Pipeline

on:
  # Run on every push and pull request
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  
  # Run daily at 6 AM UTC (health check)
  schedule:
    - cron: '0 6 * * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

jobs:
  # Job 1: Basic API Tests
  api-tests:
    name: 🧪 API Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Run tests in parallel across multiple environments
        environment: [production, staging]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npx playwright install
    
    - name: 🧪 Run API Tests
      run: |
        echo "🚀 Running tests for environment: ${{ matrix.environment }}"
        npx playwright test tests/api/user-management-simple.spec.js --reporter=html
      env:
        TEST_ENVIRONMENT: ${{ matrix.environment }}
        CI: true
    
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.environment }}
        path: |
          playwright-report/
          test-results/
        retention-days: 7
    
    - name: 📈 Upload Test Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.environment }}
        path: playwright-report/
        retention-days: 30

  # Job 2: Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npx playwright install
    
    - name: ⚡ Run Performance Tests
      run: |
        echo "⚡ Running performance tests..."
        npx playwright test tests/api/user-management-simple.spec.js --repeat-each=5 --reporter=json > performance-results.json
    
    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json

  # Job 3: Security & Error Testing
  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npx playwright install
    
    - name: 🛡️ Run Security Tests
      run: |
        echo "🛡️ Running security and error handling tests..."
        # Run your existing tests that include error scenarios
        npx playwright test tests/api/user-management-simple.spec.js --grep "error|security|invalid"

  # Job 4: Test Results Summary
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [api-tests, performance-tests, security-tests]
    if: always()
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v4
    
    - name: 📋 Generate Test Summary
      run: |
        echo "# 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **API Tests:** ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance Tests:** ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Tests:** ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Reports" >> $GITHUB_STEP_SUMMARY
        echo "- Check the **Actions** tab for detailed HTML reports" >> $GITHUB_STEP_SUMMARY
        echo "- Performance metrics available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.api-tests.result }}" = "success" ]; then
          echo "✅ **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment blocked - tests failed**" >> $GITHUB_STEP_SUMMARY
        fi